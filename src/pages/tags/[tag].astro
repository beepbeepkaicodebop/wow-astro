---
import { getCollection } from "astro:content";
import BlogPost from '../../components/BlogPost.astro';
import BaseLayout from '../../layouts/BaseLayout.astro';

export async function getStaticPaths() {
  const allPosts = await getCollection("blog");

  // generates an array of all the tags used in the blog posts, without duplicates using Set
  const uniqueTags = [
    ...new Set(
      allPosts.map((post: any) => 
      post.data.tags).flat()
    )
  ];

  // maps the uniqueTags list (array) to dynamically filter the posts list for those that contain each tag and then add it as the props, and the current tag as the params, to the object of the getStaticPaths function. this it how it generates pages from existing tags using js instead of manually adding each new tag like the commented out code below it.
  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts
      .filter((post: any) => post.data.tags.includes(tag));
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });

  // previous code: example of manually adding each new tag
  /*
    return [
      {
        params: {tag: "astro"}, 
        props: {posts: allPosts}
      },
      {
        params: {tag: "successes"}, 
        props: {posts: allPosts}
      },
      {
        params: {tag: "community"}, 
        props: {posts: allPosts}
      },
      {
        params: {tag: "blogging"}, 
        props: {posts: allPosts}
      },
      {
        params: {tag: "setbacks"}, 
        props: {posts: allPosts}
      },
      {
        params: {tag: "learning in public"}, 
        props: {posts: allPosts}
      }
    ];
  */
};

const { tag } = Astro.params;
const { posts } = Astro.props;
---

<BaseLayout pageTitle={tag}>
  <p>
    Posts tagged with {tag}
  </p>

  <ul>
    {
      posts.map((post: any) => 
        <BlogPost 
          url={`/posts/${post.id}/`} 
          title={post.data.title}
        />
      )
    }
  </ul>
</BaseLayout>